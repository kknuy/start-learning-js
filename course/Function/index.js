/* 
Задание #1
Как мы уже с вами разобрались, существует 3 вида функций: function expression, function
declaration и стрелочная функция.
Первым делом потренируемся их создавать. Вам необходимо создать 3 функции трех
разных видов. Они должны принимать в себя параметр name и возвращать строку,
подставляя туда этот параметр. Название у них должны быть следующими: getName1,
getName2, getName3.
Функции необходимо удовлетворять следующим условиям:
1. В каждую из этих функций должен быть передан 1 параметр name.
2. Из каждой функции с помощью return должно быть возвращено значение “Имя
равно name”, где name - значение переданного в функцию параметра name.
После вам необходимо вызвать каждую функцию и вывести возвращаемое из нее
значение в консоль.
*/

function getName1 (name) {
    return console.log(`Имя равно ${name} `);
};

const getName2 = function (name) {
    return console.log(`Имя равно ${name} `);
};

const getName3 = (name) => {
    return console.log(`Имя равно ${name} `);
};

getName1("vasya");
getName2("vasya");
getName3("vasya");


/* 
Задание #2
Необходимо создать функцию getSumOfNumbers. Она будет считать сумму от 0 до
переданного числа. Выберите любой из 3 типов при создании функции.
getSumOfNumbers принимает в себя 2 параметра: number и type.
Параметр number - это число, до которого будет считаться сумма. То есть, если было
передано число 10, то функция должна посчитать сумму от 0 до 10 (0 + 1 + 2 + … + 10).
Параметр type отвечает за выбор чисел для подсчета суммы. Он может быть 3-мя
значениями: “odd”, “even” и “”. Если type равняется “odd”, то в сумму должны входить
только нечетные числа, “even” - четные числа, пустая строка “” - все числа. По умолчанию
параметр type должен быть равен odd.
Функция getSumOfNumbers должна возвращать итоговую сумму с помощью return.
Возможные результаты функции getSumOfNumbers:
1. number = 10, type = ‘odd’. Возвращает 25.
2. number = 10, type = ‘even’. Возвращает 30.
3. number = 10, type = ‘’. Возвращает 55
*/

const getSumOfNumbers = (number, type) => {
    let sum = 0;
    for (let i = 0; i <= number; i++) {
        if (type === 'even') {
            i % 2 === 0 ? sum += i : 0;
        }else if (type === 'odd') {
            i % 2 === 0 ? 0 :  sum += i;
        } else {
            sum += i;
        };
    }
    return  console.log(`sum = ${sum}`);
};

getSumOfNumbers(10,"odd");
getSumOfNumbers(10,"even");
getSumOfNumbers(10,"");


2 % 2 === 0 ? console.log("2",2) : console.log("2",1);


/* 
Задание #3
Вам необходимо создать функцию getDivisorsCount, которая будет высчитывать
количество делителей для переданного числа. Она принимает в себя единственный
параметр number. По умолчанию он должен быть равен 1.
Если number меньше нуля либо является не целым (можно проверить при помощи
функции Number.isInteger(number)), то выводите в модальное окно при помощи alert
сообщение “number должен быть целым числом и больше нуля!”.
Примеры:
getDivisorsCount(4) // Вернет 3 (делители - 1, 2, 4)
getDivisorsCount(5) // Вернет 2 (делители - 1, 5)
getDivisorsCount(12) // Вернет 6 (делители - 1, 2, 3, 4, 6, 12)
getDivisorsCount(30) // Вернет 8 (делители - 1, 2, 3, 5, 6, 10, 15,30)
*/

const getDivisorsCount = (number = 1) => {
    if (number < 0  && Number.isInteger(number)) {
        console.log(`${number} должен быть целым числом и больше нуля!`);
        return 0;
    } else {
        for (let i = 0; i <= number; i++) {
            number % i === 0 ? console.log(`делители - ${i}`) : 0;
        }
    }
};

getDivisorsCount(55);


/*
Задание #4 (дополнительное)
Помните, как в теме со строками, мы форматировали значения, которые вводит
пользователь в текстовое поле? Так вот, представьте, что у нас есть 10 текстовых полей,
для которых нам нужно сделать одно и то же форматирование. Это что же, придется
писать 10 раз один и тот же код? Конечно же нет, ведь у нас существуют функции.
Часто функции нужны для того, чтобы реализовать какую либо логику (например,
форматирование строки) и не копировать и вставлять ее несколько раз. Рассмотрите
примеры ниже.
Без функции:
console.log('Привет, Максим!');
console.log('Вам 20 лет!');
console.log('Привет, Игорь!');
console.log('Вам 25 лет!');
console.log('Привет, Анастасия!');
console.log('Вам 28 лет!');
С функцией:
const getInfo = (name, age) => {
console.log(`Привет, ${name}!`);
console.log(`Вам ${age} лет!`); }
}
getInfo('Максим', 20);
getInfo('Игорь', 25);
getInfo('Анастасия', 28);
Я думаю, вам понятно, что пример с функцией более удобен в использовании и
уменьшает количество повторяющегося кода.
Сейчас ваша задача состоит в том, чтобы создать функцию checkQuestionAnswer,
которая будет задавать пользователю вопрос и автоматически проверять полученный
ответ.
Она принимает в себя 2 параметра: question и correctAnswer
Параметр question - это вопрос, который будет задаваться пользователю и будет
передан, как параметр в функцию prompt.
Параметр correctAnswer - это правильный ответ на вопрос. Вам необходимо получить
значение, которое введет пользователь в текстовое поле, и сверить его с параметром
correctAnswer. Если пользователь дал верный ответ, то выведите в модальном окне через
alert сообщение “Ответ верный”, иначе - “Ответ неверный”.
Также ****в коде нам нужно учесть, если пользователь введет данную строку “яБлОко“, а
параметр correctAnswer будет равен “Яблоко”, то ответ всё равно должен быть засчитан
как правильный. То есть, ответ не должен зависеть от регистра символов и от количества
пробелов в начале и в конце ответа.
Когда создадите функцию, вызовите данный код для ее проверки:
checkQuestionAnswer('Арбуз это фрукт или ягода?', 'Ягода');
checkQuestionAnswer('Сколько в среднем зубов у взрослого человека?',
'32');
checkQuestionAnswer('Как называется самая маленькая птица в мире?',
'Колибри'); 
 */

const checkQuestionAnswer = (question, correctAnswer) => {
    let answer = prompt(question);
    answer.trim().toLowerCase() === correctAnswer.toLowerCase() ? console.log('Ответ верный') : console.log('Ответ неверный');
};

checkQuestionAnswer('Арбуз это фрукт или ягода?', 'Ягода');
checkQuestionAnswer('Сколько в среднем зубов у взрослого человека?','32');
checkQuestionAnswer('Как называется самая маленькая птица в мире?','Колибри'); 